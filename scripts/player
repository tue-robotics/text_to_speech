#!/usr/bin/env python
# coding: utf-8

"""
This node listens to a service call and a topic for text to speech
requests. These will be processed by the festival or the philips tts module.
"""

from collections import deque

import rospy

from std_srvs.srv import Empty
from text_to_speech.srv import Play
from text_to_speech.funcs import play_file

from threading import Event
import time


class Player(object):

    def __init__(self):
        # services
        self.srv_play = rospy.Service('~play', Play, self.play_srv)
        self.srv_clear_buffer = rospy.Service('~clear_buffer', Empty, self.clear_buffer_srv)

        # buffer audio requests
        self.buffer = deque()
        self.is_playing = False

    def play_srv(self, req):
        if req.audio_type not in ["wav", "mp3", "oga"]:
            msg = "Audio format '%s' not supported" % req.audio_type
            rospy.logerr(msg)
            return msg

        wait_event = None
        if req.blocking_call:
            wait_event = Event()
        self.buffer.append((req, wait_event))

        if wait_event is not None:
            wait_event.wait()

        return ""

    def play(self, req):
        self.is_playing = True

        filename = time.strftime("/tmp/%Y-%m-%d-%H-%M-%S") + "." + req.audio_type

        with open(filename, "wb") as f:
            f.write(bytearray(req.audio_data))

        rc = play_file(filename)

        if rc:
            rospy.logerr("Could not play {}: return code: {}".format(filename, rc))

        self.is_playing = False

    def step(self):
        if not self.buffer or self.is_playing:
            return

        req, wait_event = self.buffer.popleft()

        # Play first request from the buffer
        self.play(req)
        if wait_event is not None:
            wait_event.set()

    def clear_buffer_srv(self, req=None):
        for item in self.buffer:
            wait_event = item[1]
            if wait_event is not None:
                wait_event.set()
        self.buffer.clear()


if __name__ == "__main__":
    rospy.init_node('audio_player')

    player = Player()

    try:
        while not rospy.is_shutdown():
            player.step()
            rospy.sleep(0.1)
    except rospy.ROSInterruptException:
        pass
