#! /usr/bin/env python
"""Adapted from http://glowingpython.blogspot.nl/2012/11/text-to-speech-with-correct-intonation.html"""

import rospy
from text_to_speech_msgs.srv import Speak
from text_to_speech.funcs import festival_to_file, google_tts_to_file, play_file
from std_msgs.msg import String
import time


def tts(text, language='en'):
    try:
        generation_start = time.time()
        output_filename = google_tts(text, language)
        generation_end = time.time()

        rospy.logdebug("Generating Google TTS audio took {0} second(s)".format(generation_end - generation_start))
    except Exception as e:
        rospy.logerr(e)
        try:
            generation_start = time.time()
            output_filename = festival_tts(text)
            generation_end = time.time()

            rospy.logdebug("Generating Festival TTS audio took {0} second(s)".format(generation_end - generation_start))
        except Exception as e:
            rospy.logerr(e)

    play_start = time.time()
    rc = play_file(output_filename)
    play_end = time.time()
    if rc:
        raise Exception("Problems in playing audio file: {}".format(output_filename))

    rospy.logdebug("Playing took {} second(s)".format(play_end - play_start))


def festival_tts(text):
    try:
        output_filename = festival_to_file(text)
    except RuntimeError:
        raise Exception("Problems in generating audio file by Festival TTS")

    return output_filename


def google_tts(text, language='en'):
    # text = 'Think of color, pitch, loudness, heaviness, and hotness. Each is the topic of a branch of physics.'

    rospy.logdebug("Running Google TTS on: '{}'".format(text))

    try:
        output_filename = google_tts_to_file(text, language)
    except RuntimeError:
        rospy.logwarn("RuntimeError")
        raise Exception("Problems in generating audio file by Google TTS")

    return output_filename


def speak_up(str_msg):
    try:
        tts(str_msg.data)
        return True
    except Exception as e:
        rospy.logerr(e)
        return False


def speak_up_srv(req):
    try:
        if not req.language or req.language == "us":
            req.language = "en"  # "us" is not a language

        rospy.loginfo("Perfoming TTS in language {0.language} for sentence: '{0.sentence}'".format(req))
        tts(req.sentence, req.language)
        return ""
    except Exception as e:
        rospy.logerr(e)
        return str(e)


if __name__ == "__main__":
    rospy.init_node('text_to_speech_google')
    language = rospy.get_param("/text_to_speech/language", "us")

    subscriber = rospy.Subscriber("/text_to_speech/input", String, speak_up)

    service = rospy.Service('/text_to_speech/speak', Speak, speak_up_srv)

    rospy.loginfo("Listener {} and Service {} started".format(subscriber.resolved_name, service.resolved_name))
    rospy.logwarn("Google TTS does not take voice and emotion into account")

    rospy.spin()
